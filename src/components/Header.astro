---

---

<header
  id="main-header"
  class="fixed flex items-center justify-center z-50 w-full"
>
  <div class="container flex h-20 items-center justify-between px-4">
    <a href="/Portafolio" class="text-2xl text-muted-foreground font-extrabold"
      >YC</a
    >

    <div class="flex items-center gap-x-10">
      <nav class="flex flex-row space-x-6 relative">
        <!-- üéØ Indicador animado -->
        <span
          id="nav-indicator"
          class="absolute bottom-0 left-0 h-[2px] bg-primary transition-all duration-300 ease-out"
          style="width: 0px; opacity: 0;"></span>

        <a
          class="relative text-base font-medium transition-colors hover:text-primary text-muted-foreground"
          href="#hero"
          data-section="hero">Inicio</a
        >
        <a
          class="text-base font-medium transition-colors hover:text-primary text-muted-foreground"
          href="#about"
          data-section="about">Sobre M√≠</a
        >
        <a
          class="text-base font-medium transition-colors hover:text-primary text-muted-foreground"
          href="#skills"
          data-section="skills">Habilidades</a
        >
      </nav>

      <!-- üåì Toggle Dark Mode -->
    </div>
    <label class="flex items-center gap-2 cursor-pointer">
      <input type="checkbox" id="theme-toggle" class="sr-only peer" />
      <div
        class="relative w-9 h-5 bg-foreground peer-focus:outline-none peer-focus:ring-ring rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-background after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-primary"
      >
      </div>
    </label>
  </div>
</header>

<style>
  /* üé® Header - Estado inicial */
  #main-header {
    background-color: transparent;
    backdrop-filter: blur(0px);
    -webkit-backdrop-filter: blur(0px);
    box-shadow: none;
    transition:
      background-color 0.3s ease,
      backdrop-filter 0.3s ease,
      box-shadow 0.3s ease;
  }

  /* üé® Estado con scroll - Efectos comunes */
  #main-header.scrolled {
    backdrop-filter: blur(12px) !important;
    -webkit-backdrop-filter: blur(12px) !important;
  }

  /* ‚òÄÔ∏è Modo claro (por defecto) */
  #main-header.scrolled {
    background-color: rgba(255, 255, 255, 0.85) !important;
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -1px rgba(0, 0, 0, 0.06) !important;
  }

  /* üåô Modo oscuro - Mayor especificidad */
  html.dark #main-header.scrolled {
    background-color: rgba(10, 10, 15, 0.3) !important;
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.3),
      0 2px 4px -1px rgba(0, 0, 0, 0.2) !important;
  }
</style>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  const isDark = true; // Valor predeterminado del tema oscuro

  function applyTheme(isDark: boolean) {
    if (isDark) {
      document.documentElement.classList.add("dark");
      localStorage.setItem("theme", "dark");
    } else {
      document.documentElement.classList.remove("dark");
      localStorage.setItem("theme", "light");
    }
  }

  applyTheme(isDark);

  const checkbox = document.getElementById("theme-toggle") as HTMLInputElement;
  if (checkbox) {
    checkbox.checked = isDark;

    // Evento para cambiar el tema
    checkbox.addEventListener("change", (e) => {
      applyTheme((e.target as HTMLInputElement).checked);
    });
  }

  // üéØ Smooth Scroll con Lenis
  document.addEventListener("DOMContentLoaded", () => {
    const header = document.getElementById("main-header");

    // ‚ú® Efecto del header al hacer scroll (versi√≥n simple)
    if (header) {
      const handleScroll = () => {
        const scrolled = window.scrollY > 200;

        if (scrolled) {
          header.classList.add("scrolled");
        } else {
          header.classList.remove("scrolled");
        }
      };

      // Escuchar el scroll
      window.addEventListener("scroll", handleScroll, { passive: true });

      // Ejecutar al cargar para estado inicial
      handleScroll();
    }

    // üéØ Indicador animado del nav
    const navLinks = document.querySelectorAll("header nav a[data-section]");
    const indicator = document.getElementById("nav-indicator");
    let currentActiveLink: HTMLElement | null = null;

    // Funci√≥n para mover el indicador bajo un enlace
    const moveIndicator = (link: HTMLElement) => {
      if (!indicator) return;

      const linkRect = link.getBoundingClientRect();
      const navRect = link.parentElement?.getBoundingClientRect();

      if (navRect) {
        const leftPosition = linkRect.left - navRect.left;

        gsap.to(indicator, {
          x: leftPosition,
          width: linkRect.width,
          opacity: 1,
          duration: 0.3,
          ease: "power2.out",
        });
      }

      currentActiveLink = link;
    };

    // Crear ScrollTriggers para cada secci√≥n
    navLinks.forEach((link) => {
      const sectionId = link.getAttribute("data-section");
      const section = document.getElementById(sectionId!);

      if (section) {
        ScrollTrigger.create({
          trigger: section,
          start: "top 30%",
          end: "bottom 30%",
          onEnter: () => moveIndicator(link as HTMLElement),
          onEnterBack: () => moveIndicator(link as HTMLElement),
        });
      }

      // Click en los enlaces
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const href = link.getAttribute("href");

        if (href) {
          const targetId = href.substring(1);
          const targetElement = document.getElementById(targetId);

          if (targetElement) {
            // Mover el indicador inmediatamente
            moveIndicator(link as HTMLElement);

            // ‚ú® Usar Lenis para scroll suave con inercia
            const lenis = (window as any).lenis;
            if (lenis) {
              const headerOffset = 80;
              const elementPosition = targetElement.offsetTop;
              const offsetPosition = elementPosition - headerOffset;

              lenis.scrollTo(offsetPosition, {
                duration: 1.2,
                easing: (t: number) =>
                  Math.min(1, 1.001 - Math.pow(2, -10 * t)),
              });
            }
          }
        }
      });
    });

    // Inicializar con la primera secci√≥n
    if (navLinks.length > 0) {
      moveIndicator(navLinks[0] as HTMLElement);
    }
  });
</script>

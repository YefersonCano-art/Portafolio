---
import { SunIcon, MoonIcon } from "./icons";
---

<header
  id="main-header"
  class="fixed flex items-center justify-center z-50 w-full"
>
  <div class="container flex h-20 items-center justify-between px-4">
    <a href="/" class="text-2xl text-muted-foreground font-extrabold">YC</a>

    <!-- Desktop Navigation -->
    <div class="hidden md:flex items-center gap-x-10">
      <nav class="flex flex-row space-x-6 relative">
        <!-- üéØ Indicador animado -->
        <span
          id="nav-indicator"
          class="absolute bottom-0 left-0 h-[2px] bg-primary transition-all duration-300 ease-out"
          style="width: 0px; opacity: 0;"></span>

        <a
          class="relative text-base font-medium transition-colors hover:text-primary text-muted-foreground"
          href="#hero"
          data-section="hero">Inicio</a
        >
        <a
          class="text-base font-medium transition-colors hover:text-primary text-muted-foreground"
          href="#about"
          data-section="about">Sobre M√≠</a
        >
        <a
          class="text-base font-medium transition-colors hover:text-primary text-muted-foreground"
          href="#skills"
          data-section="skills">Habilidades</a
        >
        <a
          class="text-base font-medium transition-colors hover:text-primary text-muted-foreground"
          href="#education"
          data-section="education">Educaci√≥n</a
        >
        <a
          class="text-base font-medium transition-colors hover:text-primary text-muted-foreground"
          href="#projects"
          data-section="projects">Proyectos</a
        >
      </nav>
    </div>

    <!-- Right Section: Theme Toggle + Mobile Menu Button -->
    <div class="flex items-center gap-4">
      <!-- üåì Toggle Dark Mode -->
      <label class="relative flex items-center cursor-pointer w-6 h-6">
        <!-- input antes de los iconos para que `peer-checked` afecte a los siblings posteriores -->
        <input
          type="checkbox"
          id="theme-toggle"
          class="sr-only peer"
          aria-label="Toggle theme"
        />

        <!-- Sun: oculto cuando checked (modo oscuro) -->
        <SunIcon
          class="absolute inset-0 w-5 h-5 opacity-0 scale-75 rotate-90 peer-checked:opacity-100 peer-checked:scale-100 peer-checked:rotate-0 text-muted-foreground transition-all duration-300"
          id="sun"
        />

        <!-- Moon: visible cuando checked (modo oscuro) -->
        <MoonIcon
          class="absolute inset-0 w-5 h-5 opacity-100 scale-100 rotate-0 peer-checked:opacity-0 peer-checked:scale-75 peer-checked:-rotate-90 text-muted-foreground transition-all duration-300"
          id="moon"
        />
      </label>

      <!-- üçî Mobile Menu Button -->
      <button
        id="mobile-menu-button"
        class="md:hidden flex flex-col gap-1.5 w-8 h-8 items-center justify-center relative z-50"
        aria-label="Toggle menu"
      >
        <span
          class="block w-6 h-0.5 bg-foreground transition-all duration-300 ease-out"
          id="hamburger-line-1"></span>
        <span
          class="block w-6 h-0.5 bg-foreground transition-all duration-300 ease-out"
          id="hamburger-line-2"></span>
        <span
          class="block w-6 h-0.5 bg-foreground transition-all duration-300 ease-out"
          id="hamburger-line-3"></span>
      </button>
    </div>
  </div>

  <!-- üì± Mobile Menu -->
  <nav
    id="mobile-menu"
    class="md:hidden fixed top-20 left-0 right-0 bg-background/95 backdrop-blur-lg shadow-lg opacity-0 invisible transition-all duration-300 ease-out translate-y-[-10px]"
  >
    <div class="container px-4 py-6 flex flex-col space-y-4">
      <a
        class="mobile-nav-link text-lg font-medium transition-colors hover:text-primary text-muted-foreground py-2 border-b border-border/40"
        href="#hero"
        data-section="hero">Inicio</a
      >
      <a
        class="mobile-nav-link text-lg font-medium transition-colors hover:text-primary text-muted-foreground py-2 border-b border-border/40"
        href="#about"
        data-section="about">Sobre M√≠</a
      >
      <a
        class="mobile-nav-link text-lg font-medium transition-colors hover:text-primary text-muted-foreground py-2 border-b border-border/40"
        href="#skills"
        data-section="skills">Habilidades</a
      >
      <a
        class="mobile-nav-link text-lg font-medium transition-colors hover:text-primary text-muted-foreground py-2 border-b border-border/40"
        href="#education"
        data-section="education">Educaci√≥n</a
      >
      <a
        class="mobile-nav-link text-lg font-medium transition-colors hover:text-primary text-muted-foreground py-2"
        href="#projects"
        data-section="projects">Proyectos</a
      >
    </div>
  </nav>
</header>

<style>
  /* üé® Header - Estado inicial */
  #main-header {
    background-color: transparent;
    backdrop-filter: blur(0px);
    -webkit-backdrop-filter: blur(0px);
    box-shadow: none;
    transition:
      background-color 0.3s ease,
      backdrop-filter 0.3s ease,
      box-shadow 0.3s ease;
  }

  /* üé® Estado con scroll - Efectos comunes */
  #main-header.scrolled {
    backdrop-filter: blur(12px) !important;
    -webkit-backdrop-filter: blur(12px) !important;
  }

  /* ‚òÄÔ∏è Modo claro (por defecto) */
  #main-header.scrolled {
    background-color: rgba(255, 255, 255, 0.85) !important;
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -1px rgba(0, 0, 0, 0.06) !important;
  }

  /* üåô Modo oscuro - Mayor especificidad */
  html.dark #main-header.scrolled {
    background-color: rgba(10, 10, 15, 0.3) !important;
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.3),
      0 2px 4px -1px rgba(0, 0, 0, 0.2) !important;
  }

  /* üçî Hamburger Menu Animation */
  #mobile-menu-button.active #hamburger-line-1 {
    transform: rotate(45deg) translate(6px, 6px);
  }

  #mobile-menu-button.active #hamburger-line-2 {
    opacity: 0;
  }

  #mobile-menu-button.active #hamburger-line-3 {
    transform: rotate(-45deg) translate(6px, -6px);
  }

  /* üì± Mobile Menu Visible State */
  #mobile-menu.active {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  /* Active link styling for mobile */
  .mobile-nav-link.active {
    color: hsl(var(--primary));
  }
</style>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  const isDark = true; // Valor predeterminado del tema oscuro

  function applyTheme(isDark: boolean) {
    if (isDark) {
      document.documentElement.classList.add("dark");
      localStorage.setItem("theme", "dark");
    } else {
      document.documentElement.classList.remove("dark");
      localStorage.setItem("theme", "light");
    }
  }

  applyTheme(isDark);

  const checkbox = document.getElementById("theme-toggle") as HTMLInputElement;
  if (checkbox) {
    checkbox.checked = isDark;

    // Evento para cambiar el tema
    checkbox.addEventListener("change", (e) => {
      applyTheme((e.target as HTMLInputElement).checked);
    });
  }

  // üéØ Smooth Scroll con Lenis
  document.addEventListener("DOMContentLoaded", () => {
    const header = document.getElementById("main-header");
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const mobileNavLinks = document.querySelectorAll(".mobile-nav-link");

    // ‚ú® Efecto del header al hacer scroll (versi√≥n simple)
    if (header) {
      const handleScroll = () => {
        const scrolled = window.scrollY > 200;

        if (scrolled) {
          header.classList.add("scrolled");
        } else {
          header.classList.remove("scrolled");
        }
      };

      // Escuchar el scroll
      window.addEventListener("scroll", handleScroll, { passive: true });

      // Ejecutar al cargar para estado inicial
      handleScroll();
    }

    // üçî Toggle Mobile Menu
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener("click", () => {
        mobileMenuButton.classList.toggle("active");
        mobileMenu.classList.toggle("active");
      });

      // Cerrar men√∫ al hacer click en un link
      mobileNavLinks.forEach((link) => {
        link.addEventListener("click", () => {
          mobileMenuButton.classList.remove("active");
          mobileMenu.classList.remove("active");
        });
      });

      // Cerrar men√∫ al hacer click fuera
      document.addEventListener("click", (e) => {
        const target = e.target as HTMLElement;
        if (
          !mobileMenu.contains(target) &&
          !mobileMenuButton.contains(target) &&
          mobileMenu.classList.contains("active")
        ) {
          mobileMenuButton.classList.remove("active");
          mobileMenu.classList.remove("active");
        }
      });
    }

    // üéØ Indicador animado del nav (Desktop)
    const desktopNav = document.querySelector(".hidden.md\\:flex nav");
    const navLinks = desktopNav
      ? desktopNav.querySelectorAll("a[data-section]")
      : [];
    const indicator = document.getElementById("nav-indicator");
    let currentActiveLink: HTMLElement | null = null;

    // Funci√≥n para mover el indicador bajo un enlace
    const moveIndicator = (link: HTMLElement) => {
      if (!indicator || !desktopNav) return;

      const linkRect = link.getBoundingClientRect();
      const navRect = desktopNav.getBoundingClientRect();

      const leftPosition = linkRect.left - navRect.left;

      gsap.to(indicator, {
        x: leftPosition,
        width: linkRect.width,
        opacity: 1,
        duration: 0.3,
        ease: "power2.out",
      });

      currentActiveLink = link;
    };

    // Funci√≥n para actualizar active en mobile
    const updateMobileActive = (sectionId: string) => {
      mobileNavLinks.forEach((link) => {
        if (link.getAttribute("data-section") === sectionId) {
          link.classList.add("active");
        } else {
          link.classList.remove("active");
        }
      });
    };

    // Crear ScrollTriggers para cada secci√≥n
    navLinks.forEach((link) => {
      const sectionId = link.getAttribute("data-section");
      const section = document.getElementById(sectionId!);

      if (section) {
        ScrollTrigger.create({
          trigger: section,
          start: "top 40%",
          end: "bottom 30%",
          onEnter: () => {
            moveIndicator(link as HTMLElement);
            updateMobileActive(sectionId!);
          },
          onEnterBack: () => {
            moveIndicator(link as HTMLElement);
            updateMobileActive(sectionId!);
          },
        });
      }

      // Click en los enlaces (Desktop)
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const href = link.getAttribute("href");

        if (href) {
          const targetId = href.substring(1);
          const targetElement = document.getElementById(targetId);

          if (targetElement) {
            // Mover el indicador inmediatamente
            moveIndicator(link as HTMLElement);

            // ‚ú® Usar Lenis para scroll suave con inercia
            const lenis = (window as any).lenis;
            if (lenis) {
              const headerOffset = 150;
              const elementPosition = targetElement.offsetTop;
              const offsetPosition = elementPosition - headerOffset;

              lenis.scrollTo(offsetPosition, {
                duration: 1.2,
                easing: (t: number) =>
                  Math.min(1, 1.001 - Math.pow(2, -10 * t)),
              });
            }
          }
        }
      });
    });

    // Click en los enlaces mobile
    mobileNavLinks.forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const href = link.getAttribute("href");

        if (href) {
          const targetId = href.substring(1);
          const targetElement = document.getElementById(targetId);

          if (targetElement) {
            const lenis = (window as any).lenis;
            if (lenis) {
              const headerOffset = 80;
              const elementPosition = targetElement.offsetTop;
              const offsetPosition = elementPosition - headerOffset;

              lenis.scrollTo(offsetPosition, {
                duration: 1.2,
                easing: (t: number) =>
                  Math.min(1, 1.001 - Math.pow(2, -10 * t)),
              });
            }
          }
        }
      });
    });

    // Inicializar con la primera secci√≥n
    if (navLinks.length > 0) {
      moveIndicator(navLinks[0] as HTMLElement);
    }
    if (mobileNavLinks.length > 0) {
      mobileNavLinks[0].classList.add("active");
    }
  });
</script>
